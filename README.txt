To solve this coding challenge I used java. I began by tackling how to read the csv file. I parsed the csv file into objects which I called Location. Each line of the csv is parsed by its commas and each location holds each row’s data. When parsing I realized there are few obscurities in the csv. Some locations do not include a county field. To handle this I created a Location constructor which does not take a county field and assigns the county field to null. I did this because the county field is not very useful when computing the distance from my location to the stores. I also noticed that some location have more than the 9 expected commas. I also noticed that when this happens the commas always appear in the store location, or address fields. To handle this case I created an if statement that looks for which of the section of location start with a number. I know that the address will always start with a number and I was able to work around that to handle this case. After parsing the csv I moved on to handling the user input. I created two important versions of the user’s input. One was a parsed version of the user’s input which held a version of the user’s input that the program could read. The other was a code stored in a 4 digit array to notify the program what kind of output format, measurement, and location information the user had given. This helped to ensure the program would apply the correct functions based on what the user had given. After digesting the user’s input I used the Google Maps Api’s geocoding services to take the user input location information and find the requested location’s latitude and longitude. To do this I attached the user’s information in UTF-8 format to the proper url and created an HTTP connection. I then received an XML from the HTTP connection and retrieved the latitude and longitude. Once I received the latitude and longitude of the user’s location I used the Haversine formula to compute the distance between the user’s location and every store location in the csv. As I computed the distance between the two locations I updated the value for the closest location. Finally once I had the correct location I referred to the user code to identify what kind of output the user is looking for. From there the program outputs what the user is looking for.

In order to use this program simply put all the programs in the same directory on your computer. Then open your command line and type javac find_store.java. This will compile your program. Then type java find_store and follow the steps. The largest assumption I made on this project was that putting an json format output if json was selected into the command line is ok. I have no prior experience with json and was not able to import the json package as I am unfamiliar with maven or gradle. I also assumed that the person using this program will not need a new dataset or csv. I do not ask the user for which csv they want to read from. I also did not create code for my parser to handle exceptions outside of the ones that occur in the store-locations.csv. 

Sources I used:
https://developers.google.com/maps/documentation/geocoding/start
https://www.geeksforgeeks.org/haversine-formula-to-find-distance-between-two-points-on-a-sphere/
